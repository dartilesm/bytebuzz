name: Release Management

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: "Release notes (optional)"
        required: false
        type: string
  push:
    tags:
      - "v*"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          if [ "${{ steps.get_version.outputs.VERSION }}" != "v0.1.0" ]; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "v0.1.0")
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          body: |
            ## What's New in ${{ steps.get_version.outputs.VERSION }}

            ${{ steps.changelog.outputs.CHANGELOG }}

            ---
            *This release was automatically generated by GitHub Actions*
          draft: false
          prerelease: false

  bump-version:
    name: Bump Version
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        id: bump
        run: |
          CURRENT_VERSION=$(bun run --silent node -e "console.log(require('./package.json').version)")
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          case "${{ github.event.inputs.release_type }}" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              ;;
            "patch")
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              ;;
          esac

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          bun run --silent node -e "
            const pkg = require('./package.json');
            pkg.version = '${{ steps.bump.outputs.NEW_VERSION }}';
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "

      - name: Commit and push version bump
        run: |
          git add package.json
          git commit -m "chore: bump version to ${{ steps.bump.outputs.NEW_VERSION }}"
          git push origin ${{ github.ref }}

      - name: Create and push tag
        run: |
          git tag -a "v${{ steps.bump.outputs.NEW_VERSION }}" -m "Release v${{ steps.bump.outputs.NEW_VERSION }}"
          git push origin "v${{ steps.bump.outputs.NEW_VERSION }}"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, bump-version]
    if: always()

    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Release ${{ needs.create-release.outputs.VERSION || needs.bump.outputs.NEW_VERSION }} completed successfully!"

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Release creation failed!"
          exit 1
