name: release

on:
  push:
    branches:
      - develop
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  version_pr:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Create/Update Version PR using GitHub CLI
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch --all --tags

          # Run Changesets versioning; this updates package versions and changelogs if changesets exist
          bun run release:version || true

          # If no changes produced by versioning, exit gracefully
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changesets to version. Skipping PR creation."
            exit 0
          fi

          BRANCH="changeset/release-${GITHUB_REF_NAME}"
          git checkout -B "$BRANCH"
          git add -A
          git commit -m "chore: version packages"
          git push --force --set-upstream origin "$BRANCH"

          # Create or update the PR targeting develop
          if gh pr view --head "$BRANCH" >/dev/null 2>&1; then
            gh pr edit --head "$BRANCH" --title "Version Packages" --body "Automated version bump and changelog." --base develop
          else
            gh pr create --title "Version Packages" --body "Automated version bump and changelog." --base develop --head "$BRANCH"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies
        run: bun install

      - name: Tag and Create GitHub Release using GitHub CLI
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git fetch --all --tags

          # Create and push tag from current version in package.json
          VERSION="v$(jq -r .version package.json)"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists. Skipping tag creation."
          else
            bun run release:tag
          fi

          # Create GitHub Release if it doesn't exist
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "Release $VERSION already exists."
          else
            gh release create "$VERSION" --generate-notes
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
